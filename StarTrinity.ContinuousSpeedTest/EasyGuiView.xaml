<UserControl x:Class="StarTrinity.ContinuousSpeedTest.EasyGuiView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="1000">
    <Grid Visibility="{Binding CstApp.LocalPeerConfigurationRoleAsUser, Converter={StaticResource BoolToVisibilityConverter}}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid Visibility="{Binding StartVisible, Converter={StaticResource BoolToVisibilityConverter}}" HorizontalAlignment="Center" >
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Button Grid.Row="0" Command="{Binding StartTest}" Content="Start test" FontSize="30" />

            <Expander Grid.Row="1" Header="Test with my own server..." IsExpanded="{Binding TestWithCustomServer, Mode=TwoWay}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="Run this instance as " />
                    <StackPanel Grid.Column="1" Orientation="Horizontal" >
                        <RadioButton Content="client" IsChecked="{Binding RunThisInstanceAsClient}"/>
                        <RadioButton Content="server" IsChecked="{Binding RunThisInstanceAsServer}" />
                    </StackPanel>

                    <TextBlock Visibility="{Binding RunThisInstanceAsServer, Converter={StaticResource BoolToVisibilityConverter}}" Grid.Row="1"  Text="Local IP address(es):" />
                    <TextBlock Visibility="{Binding RunThisInstanceAsServer, Converter={StaticResource BoolToVisibilityConverter}}" Grid.Row="1" Grid.Column="1" Text="{Binding LocalIpAddresses}" />

                    <TextBlock Visibility="{Binding RunThisInstanceAsClient, Converter={StaticResource BoolToVisibilityConverter}}" Grid.Row="2"  Text="Server IP address:" />
                    <TextBox Visibility="{Binding RunThisInstanceAsClient, Converter={StaticResource BoolToVisibilityConverter}}" Grid.Row="2" Grid.Column="1" Text="{Binding CustomServerIpAddress, Mode=TwoWay}" />
                    
                    <TextBlock Grid.Row="3"  Text="Server UDP port:" />
                    <StackPanel  Grid.Row="3" Grid.Column="1" Orientation="Horizontal">
                        <TextBox Text="{Binding CustomServerUdpPort, Mode=TwoWay}" Width="60" />
                        <Button Content="open access in firewall" 
                                Visibility="{Binding RunThisInstanceAsServer, Converter={StaticResource BoolToVisibilityConverter}}" 
                                ToolTip="Configures Windows Firewall to allow access to this program to client. There is no access by default."                                
                                Command="{Binding OpenAccessInFirewall}"
                                />
                    </StackPanel>
                    <TextBlock Grid.Row="4" Grid.ColumnSpan="2" TextWrapping="Wrap">                       
                        <Bold>Instructions</Bold>                  
                        <LineBreak/>
                        Run this software on two devices at same time, run first instance as server, and another instance as client,<LineBreak/>
                        measure IP network quality of between the devices. It is useful to <Italic>test just your wifi router</Italic>, without internet.<LineBreak/>
                    
                        &#8226; Run first instance as server, open access in firewall if needed, click 'Start Test'<LineBreak/>
                        &#8226; Run second instance as client, enter IP address of the server, click 'Start Test'<LineBreak/>
                        &#8226; Use some different UDP port number if needed<LineBreak/>
                    </TextBlock>
                </Grid>
            </Expander>

        </Grid>

        <Grid Visibility="{Binding MeasurementsVisible, Converter={StaticResource BoolToVisibilityConverter}}" HorizontalAlignment="Center" >
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock Grid.Row="0" Text="target: " FontSize="30" HorizontalAlignment="Right" Visibility="{Binding IsPaused, Converter={StaticResource BoolToVisibilityOppositeConverter}}"/>
            <StackPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="1" Visibility="{Binding IsPaused, Converter={StaticResource BoolToVisibilityOppositeConverter}}">
                <TextBlock Text="{Binding CstApp.SubtLocalPeerConfigurationBandwidthTargetString}" FontSize="30" />
                <Button Content="&#8657;" Command="{Binding CstApp.SubtLocalPeerConfigurationBandwidthTargetIncrease}" FontSize="30" />
                <Button Content="&#8659;"  Command="{Binding CstApp.SubtLocalPeerConfigurationBandwidthTargetDecrease}" FontSize="30" />                
            </StackPanel>           
            
            <!--<TextBlock Visibility="{Binding ModeVisibility}" Text="mode: " FontSize="30" HorizontalAlignment="Right" />
            <ComboBox Visibility="{Binding ModeVisibility}"  Grid.Column="1" VerticalAlignment="Center"  HorizontalAlignment="Center" ItemsSource="{Binding Modes}" SelectedItem="{Binding Mode}" DisplayMemberPath="Description" FontSize="25" MinWidth="150" />-->

            <TextBlock Grid.Row="1" Text="download: " FontSize="30" HorizontalAlignment="Right" Visibility="{Binding IsPaused, Converter={StaticResource BoolToVisibilityOppositeConverter}}"/>
            <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding RecentRxBandwidthString}" FontSize="30" Visibility="{Binding IsPaused, Converter={StaticResource BoolToVisibilityOppositeConverter}}"/>
            <TextBlock Grid.Row="2" Text="upload: " FontSize="30" HorizontalAlignment="Right" Visibility="{Binding IsPaused, Converter={StaticResource BoolToVisibilityOppositeConverter}}"/>
            <TextBlock Grid.Row="2" Grid.Column="1" Text="{Binding RecentTxBandwidthString}" FontSize="30" Visibility="{Binding IsPaused, Converter={StaticResource BoolToVisibilityOppositeConverter}}"/>

            <TextBlock Grid.Row="3" Text="RTT (ping): " FontSize="30" HorizontalAlignment="Right" Visibility="{Binding IsPaused, Converter={StaticResource BoolToVisibilityOppositeConverter}}"/>
            <TextBlock Grid.Row="3" Grid.Column="1" Text="{Binding RecentRttString}" FontSize="30" Visibility="{Binding IsPaused, Converter={StaticResource BoolToVisibilityOppositeConverter}}"/>

            <Button Grid.Row="4" Grid.ColumnSpan="2" Command="{Binding PauseTest}" Content="Pause" FontSize="25" Visibility="{Binding IsPaused, Converter={StaticResource BoolToVisibilityOppositeConverter}}" />
            <Button Grid.Row="4" Grid.ColumnSpan="2" Command="{Binding ResumeTest}" Content="Resume" FontSize="25" Visibility="{Binding IsPaused, Converter={StaticResource BoolToVisibilityConverter}}" />
        </Grid>
       
        <TabControl Grid.Row="1" >
            <TabItem IsSelected="{Binding MeasurementsTabIsSelected}">
                <TabItem.HeaderTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" DataContext="{Binding Source={StaticResource EasyGuiViewModel}}">
                            <TextBlock Text="Measurements" VerticalAlignment="Bottom" Margin="3"/>
                            <TextBlock Text="{Binding MeasurementsCountInRamString}" VerticalAlignment="Bottom" Margin="3"/>
                            
                            <!--<TextBlock Text="note: it may take 1 minute for the test to allocate bandwidth for you on our servers" />-->
                        </StackPanel>
                    </DataTemplate>
                </TabItem.HeaderTemplate>
                <Grid Visibility="{Binding MeasurementsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <DataGrid ItemsSource="{Binding DisplayedMeasurements}" Name="measurementsDataGrid" >
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Time" Binding="{Binding MeasurementTime, StringFormat='\{0:yyyy-MM-dd HH:mm:ss\}', Mode=OneTime}"></DataGridTextColumn>
                            <DataGridTextColumn Header="Download" Binding="{Binding RxBandwidthString, Mode=OneTime}">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="Background" Value="{Binding RxBandwidthColor, Converter={StaticResource ColorToBrushConverter}}" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Packet loss" Binding="{Binding RxPacketLossString, Mode=OneTime}">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="Background" Value="{Binding RxPacketLossColor, Converter={StaticResource ColorToBrushConverter}}" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Upload" Binding="{Binding TxBandwidthString, Mode=OneTime}">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="Background" Value="{Binding TxBandwidthColor, Converter={StaticResource ColorToBrushConverter}}" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>                    
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Packet loss" Binding="{Binding TxPacketLossString, Mode=OneTime}">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="Background" Value="{Binding TxPacketLossColor, Converter={StaticResource ColorToBrushConverter}}" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>                    
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="RTT (ping)" Binding="{Binding BestRttToPeersString, Mode=OneTime}">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="Background" Value="{Binding BestRttToPeersColor, Converter={StaticResource ColorToBrushConverter}}" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>

                            <DataGridTextColumn Header="" Binding="{Binding CstUpDownString, Mode=OneTime}">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="Background" Value="{Binding CstUpDownColor, Mode=OneTime, Converter={StaticResource ColorToBrushConverter}}" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                    <StackPanel Orientation="Horizontal" Grid.Row="1">
                        <Button Command="{Binding ClearMeasurements}" Content="clear" />
                        <Button Command="{Binding ExportMeasurements}" Content="export" />

                        
                        <StackPanel Orientation="Horizontal" Background="#CCC">
                            <TextBlock Text="display" VerticalAlignment="Center" />
                            <ComboBox SelectedItem="{Binding DisplayMeasurementsMaxCount}" VerticalAlignment="Center" Padding="3 0" ItemsSource="{Binding DisplayMeasurementsMaxCounts}" Width="60" />
                            <TextBlock Text="latest measurements" VerticalAlignment="Center" />

                            <Button Height="22" Width="26" Command="{Binding DisplayMeasurementsGotoMostRecentMeasurements}" ToolTip="Go to most recent (newest) measurements">
                                <Grid>
                                    <TextBlock Text="&#9650;" FontSize="12" Margin="0 4 0 0" />
                                    <TextBlock Text="&#9650;" FontSize="12" Margin="0 -8 0 0" />
                                </Grid>
                            </Button>
                            <Button Content="&#9650;" Height="22" Width="26"  Command="{Binding DisplayMeasurementsGotoLaterMeasurements}" ToolTip="Go to more recent (next) measurements" FontSize="15" />
                            <Button Content="&#9660;" Height="22" Width="26"  Command="{Binding DisplayMeasurementsGotoEarlierMeasurements}" ToolTip="Go to earlier (previous) measurements" FontSize="15" />
                            <Button Content="&#9660;" Height="22" Width="26" Foreground="#700"  Command="{Binding DisplayMeasurementsGotoPreviousDowntime}" ToolTip="Go to previous downtime" FontSize="15"  />


                            <CheckBox IsChecked="{Binding DisplayMeasurementsMostRecentDateHasValue}" VerticalAlignment="Center" />
                            <TextBlock Text="until" VerticalAlignment="Center" />
                            <StackPanel Orientation="Horizontal" Visibility="{Binding DisplayMeasurementsMostRecentDateHasValue, Converter={StaticResource BoolToVisibilityConverter}}">                                
                                <DatePicker SelectedDate="{Binding DisplayMeasurementsMostRecentDate}" VerticalAlignment="Center" />
                                <ComboBox SelectedItem="{Binding DisplayMeasurementsMostRecentTimeH}" ItemsSource="{Binding HoursList}" Padding="3 0" VerticalAlignment="Center" />
                                <TextBlock Text="h" VerticalAlignment="Center" />
                                <ComboBox SelectedItem="{Binding DisplayMeasurementsMostRecentTimeM}" ItemsSource="{Binding MinutesList}" Padding="3 0" VerticalAlignment="Center" />
                                <TextBlock Text="m" />
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem IsSelected="{Binding UptimeStatisticsTabIsSelected}">
                <TabItem.HeaderTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" DataContext="{Binding Source={StaticResource EasyGuiViewModel}}">
                            <TextBlock Text="Uptime" VerticalAlignment="Bottom" Margin="3"/>
                            <TextBlock Text="{Binding CstApp.DowntimesTracker.TabHeaderString}" />
                        </StackPanel>
                    </DataTemplate>
                </TabItem.HeaderTemplate>
                

                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Row="0" Text="uptime:" FontSize="20" />
                    <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding CstApp.DowntimesTracker.UptimeDurationString}" FontSize="20" />
                    <TextBlock Grid.Row="1" Text="downtime:" FontSize="20" />
                    <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding CstApp.DowntimesTracker.DowntimeDurationString}" FontSize="20" Margin="3 3 20 3"/>
                    <StackPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="2">
                        <Button Command="{Binding CstApp.DowntimesTracker.Clear}" Content="clear" HorizontalAlignment="Left" FontSize="16" />
                        <Button Command="{Binding CstApp.DowntimesTracker.Export}" Content="export" HorizontalAlignment="Left" FontSize="16" />
                    </StackPanel>
                    
                    
                    <CheckBox Grid.Row="1" Grid.Column="2" IsChecked="{Binding CstApp.DowntimesTracker.DisplayUptimes, Mode=TwoWay}" Content="display uptimes" HorizontalAlignment="Left" FontSize="14" />

                    <DataGrid Grid.Row="2" Grid.ColumnSpan="3"  ItemsSource="{Binding CstApp.DowntimesTracker.DisplayedFragments}" >
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Since" Binding="{Binding StartTime, StringFormat='\{0:yyyy-MM-dd HH:mm:ss\}'}"></DataGridTextColumn>
                            <DataGridTemplateColumn Header="Till">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal" Margin="0 -4" VerticalAlignment="Center">
                                            <TextBlock Text="{Binding StopTime, StringFormat='\{0:yyyy-MM-dd HH:mm:ss\}', Mode=OneTime}" Margin="3 0" />
                                            <Button Content="go to" ToolTip="Go to measurement at this time" Name="gotoMeasurementButton" Click="GotoMeasurementButton_Click" 
                                                    Style="{StaticResource Link}" Margin="3 0" />
                                        </StackPanel>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            
                            <DataGridTextColumn Header="Duration" Binding="{Binding DurationString}">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="Background" Value="{Binding DurationColor, Converter={StaticResource ColorToBrushConverter}}" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>                                
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="State" Binding="{Binding UpOrDownString}">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="DataGridCell">
                                        <Setter Property="Background" Value="{Binding UpOrDownColor, Converter={StaticResource ColorToBrushConverter}}" />
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>
                    </DataGrid>    
                </Grid>                
            </TabItem>
        </TabControl>
    </Grid>
</UserControl>
